package com.etdon.winj.type.input;

import com.etdon.commons.builder.FluentBuilder;
import org.jetbrains.annotations.NotNull;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;

import static com.etdon.winj.type.NativeDataType.*;
import static java.lang.foreign.ValueLayout.*;

public final class HardwareInput extends InputData {

    public static final MemoryLayout HARDWAREINPUT = MemoryLayout.structLayout(
            DWORD.withName("uMsg"),
            WORD.withName("wParamL"),
            WORD.withName("wParamH")
    );

    /**
     * The message generated by the input hardware.
     */
    private final int message;

    /**
     * The low-order word of the lParam parameter for uMsg.
     */
    private final short lowOrderWord;

    /**
     * The high-order word of the lParam parameter for uMsg.
     */
    private final short highOrderWord;

    public HardwareInput(@NotNull final Arena arena, @NotNull MemorySegment memorySegment) {

        if (memorySegment.byteSize() == 0)
            memorySegment = memorySegment.reinterpret(HARDWAREINPUT.byteSize(), arena, null);

        this.message = memorySegment.get(JAVA_INT, 0);
        this.lowOrderWord = memorySegment.get(JAVA_SHORT, 4);
        this.highOrderWord = memorySegment.get(JAVA_SHORT, 6);

    }

    private HardwareInput(@NotNull final Builder builder) {

        this.message = builder.message;
        this.lowOrderWord = builder.lowOrderWord;
        this.highOrderWord = builder.highOrderWord;

    }

    @Override
    public MemorySegment createMemorySegment(@NotNull final Arena arena) {

        final MemorySegment memorySegment = arena.allocate(HARDWAREINPUT.byteSize());
        memorySegment.set(JAVA_INT, 0, this.message);
        memorySegment.set(JAVA_SHORT, 4, this.lowOrderWord);
        memorySegment.set(JAVA_SHORT, 6, this.highOrderWord);

        return memorySegment;

    }

    public static Builder builder() {

        return new Builder();

    }

    public static final class Builder implements FluentBuilder<HardwareInput> {

        private Integer message;
        private Short lowOrderWord;
        private Short highOrderWord;

        private Builder() {

        }

        public Builder message(final int message) {

            this.message = message;
            return this;

        }

        public Builder lowOrderWord(final short lowOrderWord) {

            this.lowOrderWord = lowOrderWord;
            return this;

        }

        public Builder highOrderWord(final short highOrderWord) {

            this.highOrderWord = highOrderWord;
            return this;

        }

        @NotNull
        @Override
        public HardwareInput build() {

            return new HardwareInput(this);

        }

    }

}
